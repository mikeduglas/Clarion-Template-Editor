#ABORT;Immediately terminates source generation by the previous #GENERATE statement.
#ACCEPT;Terminates #RESTRICT processing.
#ADD;Adds a new instance to a multi-valued user-defined symbol.
#ALIAS;Declares a synonym for a user-defined symbol.
#APPEND;Adds the file contents to the end of the current source output destination file.
#APPLICATION;Begins source generation control section.
#ASSERT;Evaluates assumptions to detect unexpected errors.
#AT;Specifies a location to generate statements.
#ATEND;Specifies template code to execute after the #PROCEDURE, #CODE, #CONTROL, or #EXTENSION generates.
#ATSTART;Specifies template code to execute before the #PROCEDURE, #CODE, #CONTROL, or #EXTENSION generates.
#BOXED;Creates a group box of prompts.
#BREAK;Immediately breaks out of the #FOR or #LOOP structure in which it is enclosed. 
#BUTTON;Creates a command button to call another page of prompts.
#CALL;Inserts code from a #GROUP, retaining the indention in its #GROUP.
#CASE;Initiates a selective execution structure.
#CLASS;Defines a formula class.
#CLEAR;Removes the value from a single-valued user-defined symbol.
#CLOSE;Closes an open generated source code disk file.
#CODE;Begins a code template that generates source into an embedded source code point.
#COMMENT;Sets the default column number for aligned comments.
#CONTEXT;Sets the code generation context to emulate generating the named section.
#CONTROL;Begins a code template that generates a set of controls into a window and the source code required to manipulate them into embedded source code points.
#CREATE;Creates a disk file to receive generated source code.
#CYCLE;Immediately passes control back to the top of the #FOR or #LOOP structure in which it is enclosed to begin the next iteration.
#DEBUG;Toggles debug generation on and off.
#DECLARE;Explicitly declares a user-defined symbol.
#DEFAULT;Begins a default procedure declaration section.
#DEFINE;Defines a user defined macro that can be expanded using #EXPAND.
#DELETE;Deletes the value from one instance of a multi-valued user-defined symbol.
#DELETEALL;Deletes the values from specified instances of a multi-valued user-defined symbol.
#DISPLAY;Displays a string constant on a properties window.
#ELSE;Provides alternate statements to execute when all preceding #IF and #ELSIF expressions are false.
#ELSIF;Provides an alternate expression to evaluate when preceding #IF and #ELSIF expressions are false.
#EMBED;Identifies an explicit position in the Template where the programmer may place their own source code.
#EMPTYEMBED;Generates comments into empty embed points.
#ENABLE;Begins a group of prompts which may be enabled or disabled based upon the evaluation of the expression.
#ENDAT
#ENDBOXED
#ENDBUTTON
#ENDCASE
#ENDCONTEXT
#ENDDEFAULT
#ENDENABLE
#ENDFIELD
#ENDFOR
#ENDGLOBALDATA
#ENDIF
#ENDLOCALDATA
#ENDLOOP
#ENDPREPARE
#ENDREPORTS
#ENDRESTRICT
#ENDSECTION
#ENDSHEET
#ENDTAB
#ENDWINDOWS
#ENDWITH
#EQUATE;Declares and assigns a value to a single-valued user-defined symbol.
#ERROR;Displays a source generation error.
#EXPAND;Expands a user defined macro.
#EXPORT;Creates a .TXA or .TXD text file from a symbol.
#EXTENSION;Begins an extension template that generates code into embedded source code points to add some functionality not associated with specific controls.
#FIELD;Begins a control prompts section.
#FIELDS
#FIND;FIXes all multi-valued parent symbols to values that point to a single child instance.
#FIX;FIXes a multi-valued symbol to the value of a single instance.
#FOR;Loops through all instances of a multi-valued symbol.
#FREE;Clears all instances of a multi-valued user-defined symbol.
#GENERATE;Generates a section of the application.
#GLOBALDATA;Begins a default global data declaration section.
#GROUP;Begins a section of template code that may be inserted into another portion of the template.
#HELP;Specifies the template's help file.
#IF;A conditional execution structure.
#IMAGE;Displays a graphic image on a properties window.
#IMPORT;Creates an .APP for Clarion for Windows from a .TXA script source file.
#INCLUDE;Adds a template file to the Template file chain.
#INDENT;Changes the indentation level of generated code.
#INSERT;Inserts code from a #GROUP.s
#INVOKE;Inserts code from a named #GROUP.
#LINK
#LOCALDATA;Begins a default local data declaration section.
#LOOP;Initiates an iterative statement execution structure.
#MESSAGE;Displays a source generation message.
#MODULE;Begins the module section.
#OF
#OPEN;Opens a disk file to receive generated source code.
#ORDINAL
#ORIG
#OROF
#PDEFINE;Adds a #pragma statement to the project system.
#POP;Deletes the last instance of a multi-valued symbol and re-fiXEs to the new last instance.
#POSTEMBED;Generates comments at the end of embed point code.
#PREEMBED;Generates comments at the beginning of embed point code.
#PREPARE;Begins a prompts symbol setup section.
#PRINT;Prints a file to the current Windows printer.
#PRIORITY;Specifies a new priority level for the code following the #PRIORITY statement.
#PROCEDURE;Begins a procedure template.
#PROGRAM;Defines the beginning of the main program module.
#PROJECT;Includes a source or object code library, or Project file, in the application's Project file.
#PROMPT;Asks the programmer for input.
#PROTOTYPE;Assigns the parameter list to the Prototype entry field.
#PURGE;Deletes the values from all instances of a user-defined symbol.
#QUERY;Generates source if the named #SUSPEND section has been released.
#READ;Reads the next record from the opened read-only file.
#REDIRECT;Changes the current generated source destination file.
#REJECT;Terminates #RESTRICT processing, indicating that the Template Code Section is invalid.
#RELEASE;Enables source generation in a #SUSPEND section. 
#REMOVE;Deletes a source output file.
#REPLACE;Performs "intelligent" file replacement.
#REPORTS;Begins a default report data structure section.
#REQ
#RESTRICT;Specifies conditions where a Template Code Section (#CODE, #CONTROL, #EXTENSION, #PROCEDURE, #PROGRAM, or #MODULE) can be used.
#RESUME;Marks the end of a section of source that is generated only if a #RELEASE statement is encountered.
#RETURN;Immediately returns from the #GROUP.
#RUN;Launches the named program.
#RUNDLL;Executes a procedure from any Windows-standard Dynamic Link Library (.DLL).
#SECTION;Marks the beginning of a section of generated code.
#SELECT;Fixes a multi-valued symbol to a particular instance number.
#SEQ
#SERVICE
#SET;Assigns a value to a single-valued user-defined symbol.
#SHEET;Declares a group of #TAB controls.
#SUSPEND;Identifiy the start of a conditionally generated source section
#SYSTEM;Marks the beginning of a section of Template code which executes when the Template set is registered or loaded from the template registry.
#TAB;Declares a group of prompts that constitute one of the multiple "pages" within a #SHEET structure.
#TEMPLATE;Begins the Template set.
#TRYALIAS;Declares a synonym for a user-defined symbol.
#TYPEMAP;Maps an EQUATE data type to a true data type based on the target operating system.
#UNFIX;Unfixes a multi-valued symbol.
#UTILITY;Begins a utility generation control.
#VALIDATE;Validates the data entered into the immediately preceding #PROMPT field.
#WHERE;Limits the availability of a #CODE to only those specific embedded source code points where the generated code would be appropriate.
#WINDOWS;Begins a default window data structure section.
#WITH;Allows a set of prompts to be associated with a single instance of a symbol (as specified by the value expression).